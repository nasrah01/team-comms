[{"C:\\Users\\nasra\\OneDrive\\Desktop\\chat-app\\client\\src\\index.js":"1","C:\\Users\\nasra\\OneDrive\\Desktop\\chat-app\\client\\src\\App.jsx":"2","C:\\Users\\nasra\\OneDrive\\Desktop\\chat-app\\client\\src\\components\\index.js":"3","C:\\Users\\nasra\\OneDrive\\Desktop\\chat-app\\client\\src\\components\\ChannelContainer.jsx":"4","C:\\Users\\nasra\\OneDrive\\Desktop\\chat-app\\client\\src\\components\\ChannelListContainer.jsx":"5","C:\\Users\\nasra\\OneDrive\\Desktop\\chat-app\\client\\src\\components\\ChannelSearch.jsx":"6","C:\\Users\\nasra\\OneDrive\\Desktop\\chat-app\\client\\src\\components\\TeamChannelList.jsx":"7","C:\\Users\\nasra\\OneDrive\\Desktop\\chat-app\\client\\src\\components\\TeamChannelPreview.jsx":"8","C:\\Users\\nasra\\OneDrive\\Desktop\\chat-app\\client\\src\\components\\Auth.jsx":"9","C:\\Users\\nasra\\OneDrive\\Desktop\\chat-app\\client\\src\\components\\ChannelInner.jsx":"10","C:\\Users\\nasra\\OneDrive\\Desktop\\chat-app\\client\\src\\components\\CreateChannel.jsx":"11","C:\\Users\\nasra\\OneDrive\\Desktop\\chat-app\\client\\src\\components\\EditChannel.jsx":"12","C:\\Users\\nasra\\OneDrive\\Desktop\\chat-app\\client\\src\\assets\\ChannelInfo.jsx":"13","C:\\Users\\nasra\\OneDrive\\Desktop\\chat-app\\client\\src\\assets\\AddChannel.jsx":"14","C:\\Users\\nasra\\OneDrive\\Desktop\\chat-app\\client\\src\\assets\\CloseCreateChannel.jsx":"15","C:\\Users\\nasra\\OneDrive\\Desktop\\chat-app\\client\\src\\components\\UserList.jsx":"16"},{"size":160,"mtime":1639918592749,"results":"17","hashOfConfig":"18"},{"size":1450,"mtime":1639921020510,"results":"19","hashOfConfig":"18"},{"size":601,"mtime":1640041474775,"results":"20","hashOfConfig":"18"},{"size":983,"mtime":1639925959660,"results":"21","hashOfConfig":"18"},{"size":2557,"mtime":1640302461023,"results":"22","hashOfConfig":"18"},{"size":718,"mtime":1640126445590,"results":"23","hashOfConfig":"18"},{"size":955,"mtime":1640028689002,"results":"24","hashOfConfig":"18"},{"size":907,"mtime":1639847187469,"results":"25","hashOfConfig":"18"},{"size":3385,"mtime":1639909829743,"results":"26","hashOfConfig":"18"},{"size":2913,"mtime":1639925023579,"results":"27","hashOfConfig":"18"},{"size":1940,"mtime":1640301951557,"results":"28","hashOfConfig":"18"},{"size":129,"mtime":1640028888364,"results":"29","hashOfConfig":"18"},{"size":797,"mtime":1639916895278,"results":"30","hashOfConfig":"18"},{"size":725,"mtime":1640028747771,"results":"31","hashOfConfig":"18"},{"size":846,"mtime":1640038481742,"results":"32","hashOfConfig":"18"},{"size":2548,"mtime":1640126369991,"results":"33","hashOfConfig":"18"},{"filePath":"34","messages":"35","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},"zgy18v",{"filePath":"37","messages":"38","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"39","messages":"40","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"41","messages":"42","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"43","messages":"44","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"45","messages":"46","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"47","usedDeprecatedRules":"36"},{"filePath":"48","messages":"49","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"50","messages":"51","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"52","usedDeprecatedRules":"36"},{"filePath":"53","messages":"54","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"55","messages":"56","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"57","messages":"58","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"59","messages":"60","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"61","messages":"62","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"63","messages":"64","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"65","messages":"66","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"67","messages":"68","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"69","usedDeprecatedRules":"36"},"C:\\Users\\nasra\\OneDrive\\Desktop\\chat-app\\client\\src\\index.js",[],["70","71"],"C:\\Users\\nasra\\OneDrive\\Desktop\\chat-app\\client\\src\\App.jsx",[],"C:\\Users\\nasra\\OneDrive\\Desktop\\chat-app\\client\\src\\components\\index.js",[],"C:\\Users\\nasra\\OneDrive\\Desktop\\chat-app\\client\\src\\components\\ChannelContainer.jsx",[],"C:\\Users\\nasra\\OneDrive\\Desktop\\chat-app\\client\\src\\components\\ChannelListContainer.jsx",[],"C:\\Users\\nasra\\OneDrive\\Desktop\\chat-app\\client\\src\\components\\ChannelSearch.jsx",["72"],"import React, { useState } from 'react';\r\n//import { getChannel, useChatContext } from 'stream-chat-react';\r\n\r\nconst ChannelSearch = () => {\r\n\r\n  const [query, setQuery] = useState('');\r\n  const [loading, setLoading] = useState(false);\r\n\r\n  const getChannels = async (text) => {\r\n    try {\r\n      //to set up\r\n    } catch (error) {\r\n      setQuery('')\r\n    }\r\n  }\r\n\r\n  const onSearch = (e) => {\r\n    e.preventDefault();\r\n    setLoading(true);\r\n    setQuery(e.target.value);\r\n    getChannels(e.target.value);\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      <div>\r\n        search Icon\r\n      </div>\r\n      <input placeholder='' type= 'text' value={query} onChange={onSearch} />\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default ChannelSearch\r\n","C:\\Users\\nasra\\OneDrive\\Desktop\\chat-app\\client\\src\\components\\TeamChannelList.jsx",[],"C:\\Users\\nasra\\OneDrive\\Desktop\\chat-app\\client\\src\\components\\TeamChannelPreview.jsx",["73"],"import React from 'react';\r\nimport {Avatar, useChatContext} from 'stream-chat-react';\r\n\r\nconst TeamChannelPreview = ({channel, type}) => {\r\n\r\n  const {channel: activeChannel, client} = useChatContext();\r\n  const ChannelPreview = () => {\r\n    return (\r\n      <p>\r\n        # {channel?.data?.name || channel?.data?.id}\r\n      </p>\r\n    )\r\n  };\r\n\r\n  const DirectPreview = () => {\r\n    const members = Object.values(channel.state.members).filter( ({user}) => user.id !== client.userID);\r\n\r\n    return (\r\n      <div>\r\n        <Avatar\r\n          image={members[0]?.user?.image}\r\n          name={members[0]?.user?.fullName}\r\n          size={24}\r\n        />\r\n        <p>{members[0]?.user?.fullName}</p>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <div onClick={() => console.log(channel)}>\r\n      {type === 'team' ? <ChannelPreview /> : <DirectPreview />}\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default TeamChannelPreview\r\n","C:\\Users\\nasra\\OneDrive\\Desktop\\chat-app\\client\\src\\components\\Auth.jsx",[],"C:\\Users\\nasra\\OneDrive\\Desktop\\chat-app\\client\\src\\components\\ChannelInner.jsx",[],"C:\\Users\\nasra\\OneDrive\\Desktop\\chat-app\\client\\src\\components\\CreateChannel.jsx",[],"C:\\Users\\nasra\\OneDrive\\Desktop\\chat-app\\client\\src\\components\\EditChannel.jsx",[],"C:\\Users\\nasra\\OneDrive\\Desktop\\chat-app\\client\\src\\assets\\ChannelInfo.jsx",[],"C:\\Users\\nasra\\OneDrive\\Desktop\\chat-app\\client\\src\\assets\\AddChannel.jsx",[],"C:\\Users\\nasra\\OneDrive\\Desktop\\chat-app\\client\\src\\assets\\CloseCreateChannel.jsx",[],"C:\\Users\\nasra\\OneDrive\\Desktop\\chat-app\\client\\src\\components\\UserList.jsx",["74"],"import React, {useEffect, useState} from 'react';\r\nimport { Avatar, useChatContext } from 'stream-chat-react';\r\nimport { TiTick } from \"react-icons/ti\";\r\n\r\nconst ListContainer = ({ children }) => {\r\n  return (\r\n    <div>\r\n      <div>\r\n        <p>User</p>\r\n        <p>Invite</p>\r\n      </div>\r\n      {children}\r\n    </div>\r\n  )\r\n}\r\n\r\nconst UserItem = ({ user, setSelectedUsers }) => {\r\n   const [selected, setSelected] = useState(false);\r\n\r\n   const handleSelect = () => {\r\n     if (selected) {\r\n       setSelectedUsers((prevUsers) =>\r\n         prevUsers.filter((prevUser) => prevUser !== user.id)\r\n       );\r\n     } else {\r\n       setSelectedUsers((prevUsers) => [...prevUsers, user.id]);\r\n     }\r\n\r\n     setSelected((prevSelected) => !prevSelected);\r\n   };\r\n\r\n   return (\r\n     <div onClick={handleSelect}>\r\n       <div>\r\n         <Avatar image={user.image} name={user.fullName || user.id} size={32} />\r\n         <p>{user.fullName || user.id}</p>\r\n       </div>\r\n       {selected ? <TiTick /> : ''}\r\n     </div>\r\n   );\r\n}\r\n\r\nconst UserList = ({ setSelectedUsers }) => {\r\n  const { client } = useChatContext();\r\n  const [users, setUsers] = useState([]);\r\n  const [loading, setLoading] = useState(false);\r\n  const [listEmpty, setListEmpty] = useState(false);\r\n  const [error, setError] = useState(false);\r\n\r\n  useEffect(() => {\r\n    const getUsers = async () => {\r\n      if (loading) return;\r\n\r\n      setLoading(true);\r\n\r\n      try {\r\n        const response = await client.queryUsers(\r\n          { id: { $ne: client.userID } },\r\n          { id: 1 },\r\n          { limit: 8 }\r\n        );\r\n\r\n        if (response.users.length) {\r\n          setUsers(response.users);\r\n        } else {\r\n          setListEmpty(true);\r\n        }\r\n      } catch (error) {\r\n        setError(true);\r\n      }\r\n      setLoading(false);\r\n    };\r\n\r\n    if (client) getUsers();\r\n  }, []);\r\n\r\n  if (error) {\r\n    return (\r\n      <ListContainer>\r\n        <div>\r\n          Error loading, please refresh and try again.\r\n        </div>\r\n      </ListContainer>\r\n    );\r\n  }\r\n\r\n  if (listEmpty) {\r\n    return (\r\n      <ListContainer>\r\n        <div>No users found.</div>\r\n      </ListContainer>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <ListContainer>\r\n      {loading ? (\r\n        <div>Loading users...</div>\r\n      ) : (\r\n        users?.map((user, i) => (\r\n          <UserItem\r\n            index={i}\r\n            key={user.id}\r\n            user={user}\r\n            setSelectedUsers={setSelectedUsers}\r\n          />\r\n        ))\r\n      )}\r\n    </ListContainer>\r\n  );\r\n}\r\n\r\nexport default UserList\r\n",{"ruleId":"75","replacedBy":"76"},{"ruleId":"77","replacedBy":"78"},{"ruleId":"79","severity":1,"message":"80","line":7,"column":10,"nodeType":"81","messageId":"82","endLine":7,"endColumn":17},{"ruleId":"79","severity":1,"message":"83","line":6,"column":19,"nodeType":"81","messageId":"82","endLine":6,"endColumn":32},{"ruleId":"84","severity":1,"message":"85","line":75,"column":6,"nodeType":"86","endLine":75,"endColumn":8,"suggestions":"87"},"no-native-reassign",["88"],"no-negated-in-lhs",["89"],"no-unused-vars","'loading' is assigned a value but never used.","Identifier","unusedVar","'activeChannel' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'client' and 'loading'. Either include them or remove the dependency array.","ArrayExpression",["90"],"no-global-assign","no-unsafe-negation",{"desc":"91","fix":"92"},"Update the dependencies array to be: [client, loading]",{"range":"93","text":"94"},[1852,1854],"[client, loading]"]