[{"C:\\Users\\nasra\\OneDrive\\Desktop\\chat-app\\client\\src\\index.js":"1","C:\\Users\\nasra\\OneDrive\\Desktop\\chat-app\\client\\src\\App.jsx":"2","C:\\Users\\nasra\\OneDrive\\Desktop\\chat-app\\client\\src\\components\\index.js":"3","C:\\Users\\nasra\\OneDrive\\Desktop\\chat-app\\client\\src\\components\\ChannelContainer.jsx":"4","C:\\Users\\nasra\\OneDrive\\Desktop\\chat-app\\client\\src\\components\\ChannelListContainer.jsx":"5","C:\\Users\\nasra\\OneDrive\\Desktop\\chat-app\\client\\src\\components\\ChannelSearch.jsx":"6","C:\\Users\\nasra\\OneDrive\\Desktop\\chat-app\\client\\src\\components\\TeamChannelList.jsx":"7","C:\\Users\\nasra\\OneDrive\\Desktop\\chat-app\\client\\src\\components\\TeamChannelPreview.jsx":"8","C:\\Users\\nasra\\OneDrive\\Desktop\\chat-app\\client\\src\\components\\Auth.jsx":"9","C:\\Users\\nasra\\OneDrive\\Desktop\\chat-app\\client\\src\\components\\ChannelInner.jsx":"10","C:\\Users\\nasra\\OneDrive\\Desktop\\chat-app\\client\\src\\components\\CreateChannel.jsx":"11","C:\\Users\\nasra\\OneDrive\\Desktop\\chat-app\\client\\src\\components\\EditChannel.jsx":"12","C:\\Users\\nasra\\OneDrive\\Desktop\\chat-app\\client\\src\\assets\\ChannelInfo.jsx":"13","C:\\Users\\nasra\\OneDrive\\Desktop\\chat-app\\client\\src\\assets\\AddChannel.jsx":"14","C:\\Users\\nasra\\OneDrive\\Desktop\\chat-app\\client\\src\\assets\\CloseCreateChannel.jsx":"15","C:\\Users\\nasra\\OneDrive\\Desktop\\chat-app\\client\\src\\components\\UserList.jsx":"16","C:\\Users\\nasra\\OneDrive\\Desktop\\chat-app\\client\\src\\components\\ResultsDropdown.jsx":"17"},{"size":160,"mtime":1639918592749,"results":"18","hashOfConfig":"19"},{"size":1525,"mtime":1640896568873,"results":"20","hashOfConfig":"19"},{"size":666,"mtime":1640539399812,"results":"21","hashOfConfig":"19"},{"size":983,"mtime":1641423143585,"results":"22","hashOfConfig":"19"},{"size":3944,"mtime":1641422873363,"results":"23","hashOfConfig":"19"},{"size":1969,"mtime":1640539527780,"results":"24","hashOfConfig":"19"},{"size":955,"mtime":1640028689002,"results":"25","hashOfConfig":"19"},{"size":1210,"mtime":1640540573736,"results":"26","hashOfConfig":"19"},{"size":6181,"mtime":1641420848615,"results":"27","hashOfConfig":"19"},{"size":2913,"mtime":1639925023579,"results":"28","hashOfConfig":"19"},{"size":1940,"mtime":1640527884100,"results":"29","hashOfConfig":"19"},{"size":1672,"mtime":1640536058498,"results":"30","hashOfConfig":"19"},{"size":797,"mtime":1639916895278,"results":"31","hashOfConfig":"19"},{"size":725,"mtime":1640028747771,"results":"32","hashOfConfig":"19"},{"size":846,"mtime":1640038481742,"results":"33","hashOfConfig":"19"},{"size":2548,"mtime":1640303722147,"results":"34","hashOfConfig":"19"},{"size":3732,"mtime":1640539499629,"results":"35","hashOfConfig":"19"},{"filePath":"36","messages":"37","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},"zgy18v",{"filePath":"39","messages":"40","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"41","usedDeprecatedRules":"38"},{"filePath":"42","messages":"43","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"44","messages":"45","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"46","messages":"47","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"48","messages":"49","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"50","messages":"51","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"52","messages":"53","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"54","usedDeprecatedRules":"38"},{"filePath":"55","messages":"56","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"57","messages":"58","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"59","messages":"60","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"61","messages":"62","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"63","messages":"64","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"65","messages":"66","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"67","messages":"68","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"69","messages":"70","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"71","usedDeprecatedRules":"38"},{"filePath":"72","messages":"73","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},"C:\\Users\\nasra\\OneDrive\\Desktop\\chat-app\\client\\src\\index.js",[],["74","75"],"C:\\Users\\nasra\\OneDrive\\Desktop\\chat-app\\client\\src\\App.jsx",["76"],"import React, { useState } from 'react'\nimport Cookies from 'universal-cookie';\nimport { Chat } from 'stream-chat-react';\nimport { StreamChat } from 'stream-chat';\nimport { ChannelListContainer, ChannelContainer, Auth } from './components';\nimport 'stream-chat-react/dist/css/index.css';\nimport \"./index.css\";\nimport styled from \"styled-components\";\n\nconst apiKey = \"8x9sft46tkdq\";\nconst client = StreamChat.getInstance(apiKey);\nconst cookies = new Cookies();\nconst authToken = cookies.get('token');\n\nif(authToken) {\n  client.connectUser({\n    name: cookies.get(\"username\"),\n    fullName: cookies.get(\"fullName\"),\n    id: cookies.get(\"userId\"),\n    avatar: cookies.get(\"avatar\"),\n    email: cookies.get(\"email\"),\n    hashedPassword: cookies.get(\"hashedPassword\"),\n  }, authToken);\n}\n\nfunction App() {\n  const [createType, setCreateType] = useState(\"\");\n  const [isCreating, setIsCreating] = useState(false);\n  const [isEditing, setIsEditing] = useState(false);\n\n  if(!authToken) return <Auth />\n  return (\n    <div>\n      <Chat client={client} theme=\"team light\">\n        <ChannelListContainer\n          isCreating={isCreating}\n          setIsCreating={setIsCreating}\n          setCreateType={setCreateType}\n          setIsEditing={setIsEditing}\n        />\n        <ChannelContainer\n          isCreating={isCreating}\n          setIsCreating={setIsCreating}\n          isEditing={isEditing}\n          setIsEditing={setIsEditing}\n          createType={createType}\n        />\n      </Chat>\n    </div>\n  );\n}\n\nexport default App;\n","C:\\Users\\nasra\\OneDrive\\Desktop\\chat-app\\client\\src\\components\\index.js",[],"C:\\Users\\nasra\\OneDrive\\Desktop\\chat-app\\client\\src\\components\\ChannelContainer.jsx",[],"C:\\Users\\nasra\\OneDrive\\Desktop\\chat-app\\client\\src\\components\\ChannelListContainer.jsx",[],"C:\\Users\\nasra\\OneDrive\\Desktop\\chat-app\\client\\src\\components\\ChannelSearch.jsx",[],"C:\\Users\\nasra\\OneDrive\\Desktop\\chat-app\\client\\src\\components\\TeamChannelList.jsx",[],"C:\\Users\\nasra\\OneDrive\\Desktop\\chat-app\\client\\src\\components\\TeamChannelPreview.jsx",["77"],"import React from 'react';\r\nimport {Avatar, useChatContext} from 'stream-chat-react';\r\n\r\nconst TeamChannelPreview = ({\r\n  setActiveChannel,\r\n  setIsCreating,\r\n  setIsEditing,\r\n  setToggleContainer,\r\n  channel,\r\n  type\r\n}) => {\r\n  const { channel: activeChannel, client } = useChatContext();\r\n\r\n  const ChannelPreview = () => {\r\n    return <p># {channel?.data?.name || channel?.data?.id}</p>;\r\n  };\r\n\r\n  const DirectPreview = () => {\r\n    const members = Object.values(channel.state.members).filter(\r\n      ({ user }) => user.id !== client.userID\r\n    );\r\n\r\n    return (\r\n      <div>\r\n        <Avatar\r\n          image={members[0]?.user?.image}\r\n          name={members[0]?.user?.fullName}\r\n          size={24}\r\n        />\r\n        <p>{members[0]?.user?.fullName || members[0]?.user?.id}</p>\r\n      </div>\r\n    );\r\n  };\r\n\r\n  return (\r\n    <div\r\n      onClick={() => {\r\n        setIsCreating(false);\r\n        setIsEditing(false);\r\n        setActiveChannel(channel);\r\n        if (setToggleContainer) {\r\n          setToggleContainer((prevState) => !prevState);\r\n        }\r\n      }}\r\n    >\r\n      {type === \"team\" ? <ChannelPreview /> : <DirectPreview />}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default TeamChannelPreview\r\n","C:\\Users\\nasra\\OneDrive\\Desktop\\chat-app\\client\\src\\components\\Auth.jsx",[],"C:\\Users\\nasra\\OneDrive\\Desktop\\chat-app\\client\\src\\components\\ChannelInner.jsx",[],"C:\\Users\\nasra\\OneDrive\\Desktop\\chat-app\\client\\src\\components\\CreateChannel.jsx",[],"C:\\Users\\nasra\\OneDrive\\Desktop\\chat-app\\client\\src\\components\\EditChannel.jsx",[],"C:\\Users\\nasra\\OneDrive\\Desktop\\chat-app\\client\\src\\assets\\ChannelInfo.jsx",[],"C:\\Users\\nasra\\OneDrive\\Desktop\\chat-app\\client\\src\\assets\\AddChannel.jsx",[],"C:\\Users\\nasra\\OneDrive\\Desktop\\chat-app\\client\\src\\assets\\CloseCreateChannel.jsx",[],"C:\\Users\\nasra\\OneDrive\\Desktop\\chat-app\\client\\src\\components\\UserList.jsx",["78"],"import React, {useEffect, useState} from 'react';\r\nimport { Avatar, useChatContext } from 'stream-chat-react';\r\nimport { TiTick } from \"react-icons/ti\";\r\n\r\nconst ListContainer = ({ children }) => {\r\n  return (\r\n    <div>\r\n      <div>\r\n        <p>User</p>\r\n        <p>Invite</p>\r\n      </div>\r\n      {children}\r\n    </div>\r\n  )\r\n}\r\n\r\nconst UserItem = ({ user, setSelectedUsers }) => {\r\n   const [selected, setSelected] = useState(false);\r\n\r\n   const handleSelect = () => {\r\n     if (selected) {\r\n       setSelectedUsers((prevUsers) =>\r\n         prevUsers.filter((prevUser) => prevUser !== user.id)\r\n       );\r\n     } else {\r\n       setSelectedUsers((prevUsers) => [...prevUsers, user.id]);\r\n     }\r\n\r\n     setSelected((prevSelected) => !prevSelected);\r\n   };\r\n\r\n   return (\r\n     <div onClick={handleSelect}>\r\n       <div>\r\n         <Avatar image={user.image} name={user.fullName || user.id} size={32} />\r\n         <p>{user.fullName || user.id}</p>\r\n       </div>\r\n       {selected ? <TiTick /> : ''}\r\n     </div>\r\n   );\r\n}\r\n\r\nconst UserList = ({ setSelectedUsers }) => {\r\n  const { client } = useChatContext();\r\n  const [users, setUsers] = useState([]);\r\n  const [loading, setLoading] = useState(false);\r\n  const [listEmpty, setListEmpty] = useState(false);\r\n  const [error, setError] = useState(false);\r\n\r\n  useEffect(() => {\r\n    const getUsers = async () => {\r\n      if (loading) return;\r\n\r\n      setLoading(true);\r\n\r\n      try {\r\n        const response = await client.queryUsers(\r\n          { id: { $ne: client.userID } },\r\n          { id: 1 },\r\n          { limit: 8 }\r\n        );\r\n\r\n        if (response.users.length) {\r\n          setUsers(response.users);\r\n        } else {\r\n          setListEmpty(true);\r\n        }\r\n      } catch (error) {\r\n        setError(true);\r\n      }\r\n      setLoading(false);\r\n    };\r\n\r\n    if (client) getUsers();\r\n  }, []);\r\n\r\n  if (error) {\r\n    return (\r\n      <ListContainer>\r\n        <div>\r\n          Error loading, please refresh and try again.\r\n        </div>\r\n      </ListContainer>\r\n    );\r\n  }\r\n\r\n  if (listEmpty) {\r\n    return (\r\n      <ListContainer>\r\n        <div>No users found.</div>\r\n      </ListContainer>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <ListContainer>\r\n      {loading ? (\r\n        <div>Loading users...</div>\r\n      ) : (\r\n        users?.map((user, i) => (\r\n          <UserItem\r\n            index={i}\r\n            key={user.id}\r\n            user={user}\r\n            setSelectedUsers={setSelectedUsers}\r\n          />\r\n        ))\r\n      )}\r\n    </ListContainer>\r\n  );\r\n}\r\n\r\nexport default UserList\r\n","C:\\Users\\nasra\\OneDrive\\Desktop\\chat-app\\client\\src\\components\\ResultsDropdown.jsx",[],{"ruleId":"79","replacedBy":"80"},{"ruleId":"81","replacedBy":"82"},{"ruleId":"83","severity":1,"message":"84","line":8,"column":8,"nodeType":"85","messageId":"86","endLine":8,"endColumn":14},{"ruleId":"83","severity":1,"message":"87","line":12,"column":20,"nodeType":"85","messageId":"86","endLine":12,"endColumn":33},{"ruleId":"88","severity":1,"message":"89","line":75,"column":6,"nodeType":"90","endLine":75,"endColumn":8,"suggestions":"91"},"no-native-reassign",["92"],"no-negated-in-lhs",["93"],"no-unused-vars","'styled' is defined but never used.","Identifier","unusedVar","'activeChannel' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'client' and 'loading'. Either include them or remove the dependency array.","ArrayExpression",["94"],"no-global-assign","no-unsafe-negation",{"desc":"95","fix":"96"},"Update the dependencies array to be: [client, loading]",{"range":"97","text":"98"},[1852,1854],"[client, loading]"]