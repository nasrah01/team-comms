{"ast":null,"code":"import _slicedToArray from\"C:/Users/nasra/OneDrive/Desktop/chat-app/client/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import _objectSpread from\"C:/Users/nasra/OneDrive/Desktop/chat-app/client/node_modules/@babel/runtime/helpers/esm/objectSpread2\";import React,{useState}from'react';import{ChannelList,useChatContext}from'stream-chat-react';import Cookies from'universal-cookie';import{ChannelSearch,TeamChannelList,TeamChannelPreview}from'./';import{AiOutlineLogout}from'react-icons/ai';import{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";import{Fragment as _Fragment}from\"react/jsx-runtime\";var cookies=new Cookies();var CompanyHeader=function CompanyHeader(){return/*#__PURE__*/_jsx(\"div\",{children:/*#__PURE__*/_jsx(\"div\",{className:\"text-3xl font-bold underline\",children:\"Header\"})});};var SideBar=function SideBar(_ref){var logout=_ref.logout;return/*#__PURE__*/_jsx(\"div\",{children:/*#__PURE__*/_jsx(AiOutlineLogout,{onClick:logout})});};var channelTeamFilter=function channelTeamFilter(channels){return channels.filter(function(channel){return channel.type===\"team\";});};var channelMessagingFilter=function channelMessagingFilter(channels){return channels.filter(function(channel){return channel.type===\"messaging\";});};var ChannelListContent=function ChannelListContent(_ref2){var isCreating=_ref2.isCreating,setIsCreating=_ref2.setIsCreating,setCreateType=_ref2.setCreateType,setIsEditing=_ref2.setIsEditing,setToggleContainer=_ref2.setToggleContainer;var _useChatContext=useChatContext(),client=_useChatContext.client;var logout=function logout(){cookies.remove('token');cookies.remove(\"username\");cookies.remove(\"fullName\");cookies.remove(\"userId\");cookies.remove(\"avatar\");cookies.remove(\"email\");cookies.remove(\"hashedPassword\");window.location.reload();};var filters={members:{$in:[client.userID]}};return/*#__PURE__*/_jsxs(\"div\",{children:[/*#__PURE__*/_jsx(SideBar,{logout:logout}),/*#__PURE__*/_jsxs(\"div\",{children:[/*#__PURE__*/_jsx(CompanyHeader,{}),/*#__PURE__*/_jsx(ChannelSearch,{setToggleContainer:setToggleContainer}),/*#__PURE__*/_jsx(ChannelList,{filters:filters,channelRenderFilterFn:channelTeamFilter,List:function List(listProps){return/*#__PURE__*/_jsx(TeamChannelList,_objectSpread(_objectSpread({},listProps),{},{type:\"team\",isCreating:isCreating,setIsCreating:setIsCreating,setCreateType:setCreateType,setIsEditing:setIsEditing}));},Preview:function Preview(previewProps){return/*#__PURE__*/_jsx(TeamChannelPreview,_objectSpread(_objectSpread({},previewProps),{},{type:\"team\"}));}}),/*#__PURE__*/_jsx(ChannelList,{filters:filters,channelRenderFilterFn:channelMessagingFilter,List:function List(listProps){return/*#__PURE__*/_jsx(TeamChannelList,_objectSpread(_objectSpread({},listProps),{},{type:\"messaging\",isCreating:isCreating,setIsCreating:setIsCreating,setCreateType:setCreateType,setIsEditing:setIsEditing}));},Preview:function Preview(previewProps){return/*#__PURE__*/_jsx(TeamChannelPreview,_objectSpread(_objectSpread({},previewProps),{},{type:\"messaging\"}));}})]})]});};var ChannelListContainer=function ChannelListContainer(_ref3){var setCreateType=_ref3.setCreateType,setIsCreating=_ref3.setIsCreating,setIsEditing=_ref3.setIsEditing;var _useState=useState(false),_useState2=_slicedToArray(_useState,2),toggleContainer=_useState2[0],setToggleContainer=_useState2[1];return/*#__PURE__*/_jsxs(_Fragment,{children:[/*#__PURE__*/_jsx(\"div\",{className:\"channel-list__container\",children:/*#__PURE__*/_jsx(ChannelListContent,{setIsCreating:setIsCreating,setCreateType:setCreateType,setIsEditing:setIsEditing})}),/*#__PURE__*/_jsxs(\"div\",{className:\"channel-list__container-responsive\",style:{display:'none',left:toggleContainer?\"0%\":\"-89%\",backgroundColor:\"#005fff\"},children:[/*#__PURE__*/_jsx(\"div\",{className:\"channel-list__container-toggle\",onClick:function onClick(){return setToggleContainer(function(prevToggleContainer){return!prevToggleContainer;});}}),/*#__PURE__*/_jsx(ChannelListContent,{setIsCreating:setIsCreating,setCreateType:setCreateType,setIsEditing:setIsEditing,setToggleContainer:setToggleContainer})]})]});};export default ChannelListContainer;","map":{"version":3,"sources":["C:/Users/nasra/OneDrive/Desktop/chat-app/client/src/components/ChannelListContainer.jsx"],"names":["React","useState","ChannelList","useChatContext","Cookies","ChannelSearch","TeamChannelList","TeamChannelPreview","AiOutlineLogout","cookies","CompanyHeader","SideBar","logout","channelTeamFilter","channels","filter","channel","type","channelMessagingFilter","ChannelListContent","isCreating","setIsCreating","setCreateType","setIsEditing","setToggleContainer","client","remove","window","location","reload","filters","members","$in","userID","listProps","previewProps","ChannelListContainer","toggleContainer","display","left","backgroundColor","prevToggleContainer"],"mappings":"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","sourcesContent":["import React, { useState } from 'react';\r\nimport { ChannelList, useChatContext } from 'stream-chat-react';\r\nimport Cookies from 'universal-cookie';\r\nimport { ChannelSearch, TeamChannelList, TeamChannelPreview } from './'\r\nimport { AiOutlineLogout } from 'react-icons/ai'\r\n\r\nconst cookies = new Cookies();\r\n\r\nconst CompanyHeader = () => {\r\n  return (\r\n    <div>\r\n      <div className=\"text-3xl font-bold underline\">Header</div>\r\n    </div>\r\n  );\r\n}\r\n\r\nconst SideBar = ({logout}) => {\r\n  return (\r\n    <div>\r\n      <AiOutlineLogout onClick={logout}/>\r\n    </div>\r\n  )\r\n};\r\n\r\nconst channelTeamFilter = (channels) => {\r\n  return channels.filter((channel) => channel.type === \"team\");\r\n};\r\n\r\nconst channelMessagingFilter = (channels) => {\r\n  return channels.filter((channel) => channel.type === \"messaging\");\r\n};\r\n\r\n\r\nconst ChannelListContent = ({isCreating, setIsCreating, setCreateType, setIsEditing, setToggleContainer}) => {\r\n\r\n  const { client } = useChatContext();\r\n\r\n  const logout = () => {\r\n    cookies.remove('token');\r\n    cookies.remove(\"username\");\r\n    cookies.remove(\"fullName\");\r\n    cookies.remove(\"userId\");\r\n    cookies.remove(\"avatar\");\r\n    cookies.remove(\"email\");\r\n    cookies.remove(\"hashedPassword\");\r\n\r\n    window.location.reload();\r\n  }\r\n\r\n  const filters = {members: {$in: [client.userID]}};\r\n\r\n  return (\r\n    <div>\r\n      <SideBar logout={logout}/>\r\n      <div>\r\n        <CompanyHeader />\r\n        <ChannelSearch  setToggleContainer={setToggleContainer}/>\r\n        <ChannelList\r\n          filters={filters}\r\n          channelRenderFilterFn={channelTeamFilter}\r\n          List={(listProps) => {\r\n            return (\r\n              <TeamChannelList\r\n                {...listProps}\r\n                type=\"team\"\r\n                isCreating={isCreating}\r\n                setIsCreating={setIsCreating}\r\n                setCreateType={setCreateType}\r\n                setIsEditing={setIsEditing}\r\n              />\r\n            );\r\n          }}\r\n          Preview={(previewProps) => {\r\n            return <TeamChannelPreview {...previewProps} type=\"team\" />;\r\n          }}\r\n        />\r\n        <ChannelList\r\n          filters={filters}\r\n          channelRenderFilterFn={channelMessagingFilter}\r\n          List={(listProps) => {\r\n            return (\r\n              <TeamChannelList\r\n                {...listProps}\r\n                type=\"messaging\"\r\n                isCreating={isCreating}\r\n                setIsCreating={setIsCreating}\r\n                setCreateType={setCreateType}\r\n                setIsEditing={setIsEditing}\r\n              />\r\n            );\r\n          }}\r\n          Preview={(previewProps) => {\r\n            return <TeamChannelPreview {...previewProps} type=\"messaging\" />;\r\n          }}\r\n        />\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nconst ChannelListContainer = ({setCreateType, setIsCreating, setIsEditing}) => {\r\n  const [toggleContainer, setToggleContainer] = useState(false);\r\n  return (\r\n    <>\r\n      <div className=\"channel-list__container\">\r\n        <ChannelListContent\r\n          setIsCreating={setIsCreating}\r\n          setCreateType={setCreateType}\r\n          setIsEditing={setIsEditing}\r\n        />\r\n      </div>\r\n\r\n      <div\r\n        className=\"channel-list__container-responsive\"\r\n        style={{\r\n          display: 'none',\r\n          left: toggleContainer ? \"0%\" : \"-89%\",\r\n          backgroundColor: \"#005fff\",\r\n        }}\r\n      >\r\n        <div\r\n          className=\"channel-list__container-toggle\"\r\n          onClick={() =>\r\n            setToggleContainer((prevToggleContainer) => !prevToggleContainer)\r\n          }\r\n        ></div>\r\n        <ChannelListContent\r\n          setIsCreating={setIsCreating}\r\n          setCreateType={setCreateType}\r\n          setIsEditing={setIsEditing}\r\n          setToggleContainer={setToggleContainer}\r\n        />\r\n      </div>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default ChannelListContainer\r\n"]},"metadata":{},"sourceType":"module"}