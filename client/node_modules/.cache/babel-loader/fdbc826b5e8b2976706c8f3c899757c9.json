{"ast":null,"code":"import _regeneratorRuntime from\"C:/Users/nasra/OneDrive/Desktop/chat-app/client/node_modules/@babel/runtime/regenerator\";import _asyncToGenerator from\"C:/Users/nasra/OneDrive/Desktop/chat-app/client/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";import _slicedToArray from\"C:/Users/nasra/OneDrive/Desktop/chat-app/client/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import React,{useState}from\"react\";import{useChatContext}from\"stream-chat-react\";import{UserList}from'./';import{CloseCreateChannel}from\"../assets/CloseCreateChannel\";import{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";var ChannelNameInput=function ChannelNameInput(_ref){var _ref$channelName=_ref.channelName,channelName=_ref$channelName===void 0?\"\":_ref$channelName,setChannelName=_ref.setChannelName;var handleChange=function handleChange(e){e.preventDefault();setChannelName(e.target.value);};return/*#__PURE__*/_jsxs(\"div\",{children:[/*#__PURE__*/_jsx(\"p\",{children:\"Name\"}),/*#__PURE__*/_jsx(\"input\",{value:channelName,onChange:handleChange,placeholder:\"channel-name (no spaces)\"}),/*#__PURE__*/_jsx(\"p\",{children:\"Add Members\"})]});};var EditChannel=function EditChannel(_ref2){var _channel$data;var setIsEditing=_ref2.setIsEditing;var _useChatContext=useChatContext(),channel=_useChatContext.channel;var _useState=useState(channel===null||channel===void 0?void 0:(_channel$data=channel.data)===null||_channel$data===void 0?void 0:_channel$data.name),_useState2=_slicedToArray(_useState,2),channelName=_useState2[0],setChannelName=_useState2[1];var _useState3=useState([]),_useState4=_slicedToArray(_useState3,2),selectedUsers=_useState4[0],setSelectedUsers=_useState4[1];var updateChannel=/*#__PURE__*/function(){var _ref3=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee(e){var nameChanged;return _regeneratorRuntime.wrap(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:e.preventDefault();nameChanged=channelName!==(channel.data.name||channel.data.id);if(!nameChanged){_context.next=5;break;}_context.next=5;return channel.update({name:channelName},{text:\"Channel name changed to \".concat(channelName)});case 5:if(!selectedUsers.length){_context.next=8;break;}_context.next=8;return channel.addMembers(selectedUsers);case 8:setChannelName(null);setIsEditing(false);setSelectedUsers([]);case 11:case\"end\":return _context.stop();}}},_callee);}));return function updateChannel(_x){return _ref3.apply(this,arguments);};}();return/*#__PURE__*/_jsx(\"div\",{children:/*#__PURE__*/_jsxs(\"div\",{children:[/*#__PURE__*/_jsx(\"p\",{children:\"Edit Channel\"}),/*#__PURE__*/_jsx(CloseCreateChannel,{setIsEditing:setIsEditing}),/*#__PURE__*/_jsx(ChannelNameInput,{channelName:channelName,setChannelName:setChannelName}),/*#__PURE__*/_jsx(UserList,{setSelectedUsers:setSelectedUsers}),/*#__PURE__*/_jsx(\"div\",{onClick:updateChannel,children:/*#__PURE__*/_jsx(\"button\",{children:\"Save Changes\"})})]})});};export default EditChannel;","map":{"version":3,"sources":["C:/Users/nasra/OneDrive/Desktop/chat-app/client/src/components/EditChannel.jsx"],"names":["React","useState","useChatContext","UserList","CloseCreateChannel","ChannelNameInput","channelName","setChannelName","handleChange","e","preventDefault","target","value","EditChannel","setIsEditing","channel","data","name","selectedUsers","setSelectedUsers","updateChannel","nameChanged","id","update","text","length","addMembers"],"mappings":"mYAAA,MAAOA,CAAAA,KAAP,EAAgBC,QAAhB,KAAgC,OAAhC,CACA,OAASC,cAAT,KAA+B,mBAA/B,CACA,OAASC,QAAT,KAAyB,IAAzB,CACA,OAASC,kBAAT,KAAmC,8BAAnC,C,wFAEA,GAAMC,CAAAA,gBAAgB,CAAG,QAAnBA,CAAAA,gBAAmB,MAA0C,2BAAvCC,WAAuC,CAAvCA,WAAuC,2BAAzB,EAAyB,kBAArBC,cAAqB,MAArBA,cAAqB,CACjE,GAAMC,CAAAA,YAAY,CAAG,QAAfA,CAAAA,YAAe,CAACC,CAAD,CAAO,CAC1BA,CAAC,CAACC,cAAF,GACAH,cAAc,CAACE,CAAC,CAACE,MAAF,CAASC,KAAV,CAAd,CACD,CAHD,CAKA,mBACE,oCACE,2BADF,cAEE,cACE,KAAK,CAAEN,WADT,CAEE,QAAQ,CAAEE,YAFZ,CAGE,WAAW,CAAC,0BAHd,EAFF,cAOE,kCAPF,GADF,CAWD,CAjBD,CAmBA,GAAMK,CAAAA,WAAW,CAAG,QAAdA,CAAAA,WAAc,OAAoB,sBAAlBC,CAAAA,YAAkB,OAAlBA,YAAkB,CACtC,oBAAoBZ,cAAc,EAAlC,CAAQa,OAAR,iBAAQA,OAAR,CACA,cAAsCd,QAAQ,CAACc,OAAD,SAACA,OAAD,gCAACA,OAAO,CAAEC,IAAV,wCAAC,cAAeC,IAAhB,CAA9C,wCAAOX,WAAP,eAAoBC,cAApB,eACA,eAA0CN,QAAQ,CAAC,EAAD,CAAlD,yCAAOiB,aAAP,eAAsBC,gBAAtB,eAEA,GAAMC,CAAAA,aAAa,2FAAG,iBAAOX,CAAP,kIACpBA,CAAC,CAACC,cAAF,GAEMW,WAHc,CAGAf,WAAW,IAAMS,OAAO,CAACC,IAAR,CAAaC,IAAb,EAAqBF,OAAO,CAACC,IAAR,CAAaM,EAAxC,CAHX,KAKjBD,WALiB,+CAMZN,CAAAA,OAAO,CAACQ,MAAR,CAAe,CAACN,IAAI,CAAEX,WAAP,CAAf,CAAoC,CAACkB,IAAI,mCAA6BlB,WAA7B,CAAL,CAApC,CANY,YASjBY,aAAa,CAACO,MATG,+CAUZV,CAAAA,OAAO,CAACW,UAAR,CAAmBR,aAAnB,CAVY,QAapBX,cAAc,CAAC,IAAD,CAAd,CACAO,YAAY,CAAC,KAAD,CAAZ,CACAK,gBAAgB,CAAC,EAAD,CAAhB,CAfoB,uDAAH,kBAAbC,CAAAA,aAAa,6CAAnB,CAkBA,mBAAO,kCACL,oCACE,mCADF,cAEE,KAAC,kBAAD,EAAqB,YAAY,CAAEN,YAAnC,EAFF,cAGE,KAAC,gBAAD,EAAkB,WAAW,CAAER,WAA/B,CAA4C,cAAc,CAAEC,cAA5D,EAHF,cAIE,KAAC,QAAD,EAAU,gBAAgB,CAAEY,gBAA5B,EAJF,cAKE,YAAK,OAAO,CAAEC,aAAd,uBACE,wCADF,EALF,GADK,EAAP,CAWD,CAlCD,CAoCA,cAAeP,CAAAA,WAAf","sourcesContent":["import React, { useState } from \"react\";\r\nimport { useChatContext } from \"stream-chat-react\";\r\nimport { UserList } from './';\r\nimport { CloseCreateChannel } from \"../assets/CloseCreateChannel\";\r\n\r\nconst ChannelNameInput = ({ channelName = \"\", setChannelName }) => {\r\n  const handleChange = (e) => {\r\n    e.preventDefault();\r\n    setChannelName(e.target.value);\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <p>Name</p>\r\n      <input\r\n        value={channelName}\r\n        onChange={handleChange}\r\n        placeholder=\"channel-name (no spaces)\"\r\n      />\r\n      <p>Add Members</p>\r\n    </div>\r\n  );\r\n};\r\n\r\nconst EditChannel = ({setIsEditing}) => {\r\n  const { channel } = useChatContext();\r\n  const [channelName, setChannelName] = useState(channel?.data?.name);\r\n  const [selectedUsers, setSelectedUsers] = useState([]);\r\n\r\n  const updateChannel = async (e) => {\r\n    e.preventDefault();\r\n\r\n    const nameChanged = channelName !== (channel.data.name || channel.data.id);\r\n\r\n    if(nameChanged) {\r\n      await channel.update({name: channelName}, {text: `Channel name changed to ${channelName}`});\r\n    }\r\n\r\n    if(selectedUsers.length) {\r\n      await channel.addMembers(selectedUsers);\r\n    }\r\n\r\n    setChannelName(null);\r\n    setIsEditing(false);\r\n    setSelectedUsers([]);\r\n  }\r\n\r\n  return <div>\r\n    <div>\r\n      <p>Edit Channel</p>\r\n      <CloseCreateChannel  setIsEditing={setIsEditing}/>\r\n      <ChannelNameInput channelName={channelName} setChannelName={setChannelName}/>\r\n      <UserList setSelectedUsers={setSelectedUsers} />\r\n      <div onClick={updateChannel}>\r\n        <button>Save Changes</button>\r\n      </div>\r\n    </div>\r\n  </div>;\r\n};\r\n\r\nexport default EditChannel;\r\n"]},"metadata":{},"sourceType":"module"}