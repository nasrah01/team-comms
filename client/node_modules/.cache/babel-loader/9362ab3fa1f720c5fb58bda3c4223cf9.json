{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\nasra\\\\OneDrive\\\\Desktop\\\\chat-app\\\\client\\\\src\\\\components\\\\UserList.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from 'react';\nimport { Avatar, useChatContext } from 'stream-chat-react';\nimport { FcInvite } from 'react-icons/fc';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst ListContainer = _ref => {\n  let {\n    children\n  } = _ref;\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"User\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 9,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"Invite\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 10,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 8,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 7,\n    columnNumber: 5\n  }, this);\n};\n\n_c = ListContainer;\n\nconst UserItem = _ref2 => {\n  let {\n    user\n  } = _ref2;\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(Avatar, {\n        image: user.image,\n        name: user.fullName || user.id,\n        size: 32\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 20,\n        columnNumber: 10\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 19,\n      columnNumber: 8\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 18,\n    columnNumber: 6\n  }, this);\n};\n\n_c2 = UserItem;\n\nconst UserList = () => {\n  _s();\n\n  const {\n    client\n  } = useChatContext();\n  const [users, setUsers] = useState([]);\n  const [loading, setLoading] = useState(false);\n  const [listEmpty, setListEmpty] = useState(false);\n  useEffect(() => {\n    const getUsers = async () => {\n      if (loading) return;\n      setLoading(true);\n\n      try {\n        const response = await client.queryUsers({\n          id: {\n            $ne: client.userID\n          }\n        }, {\n          id: 1\n        }, {\n          limit: 8\n        });\n\n        if (response.users.length) {\n          setUsers(response.users);\n        } else {\n          setListEmpty(true);\n        }\n      } catch (error) {\n        console.log(error);\n      }\n\n      setLoading(false);\n    };\n\n    if (client) getUsers();\n  }, []);\n  return /*#__PURE__*/_jsxDEV(ListContainer, {\n    children: loading ? /*#__PURE__*/_jsxDEV(\"div\", {\n      children: \"Loading users ...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 19\n    }, this) : users === null || users === void 0 ? void 0 : users.map((user, i) => /*#__PURE__*/_jsxDEV(UserItem, {\n      index: i,\n      user: user\n    }, user.id, false, {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 11\n    }, this))\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 61,\n    columnNumber: 5\n  }, this);\n};\n\n_s(UserList, \"80jmdVo6BrjO92qYyzgtDGpVwYw=\", false, function () {\n  return [useChatContext];\n});\n\n_c3 = UserList;\nexport default UserList;\n\nvar _c, _c2, _c3;\n\n$RefreshReg$(_c, \"ListContainer\");\n$RefreshReg$(_c2, \"UserItem\");\n$RefreshReg$(_c3, \"UserList\");","map":{"version":3,"sources":["C:/Users/nasra/OneDrive/Desktop/chat-app/client/src/components/UserList.jsx"],"names":["React","useEffect","useState","Avatar","useChatContext","FcInvite","ListContainer","children","UserItem","user","image","fullName","id","UserList","client","users","setUsers","loading","setLoading","listEmpty","setListEmpty","getUsers","response","queryUsers","$ne","userID","limit","length","error","console","log","map","i"],"mappings":";;;AAAA,OAAOA,KAAP,IAAeC,SAAf,EAA0BC,QAA1B,QAAyC,OAAzC;AACA,SAASC,MAAT,EAAiBC,cAAjB,QAAuC,mBAAvC;AACA,SAASC,QAAT,QAAyB,gBAAzB;;;AAEA,MAAMC,aAAa,GAAG,QAAkB;AAAA,MAAjB;AAAEC,IAAAA;AAAF,GAAiB;AACtC,sBACE;AAAA,2BACE;AAAA,8BACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cADF,eAEE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAFF;AAAA;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,UADF;AAQD,CATD;;KAAMD,a;;AAWN,MAAME,QAAQ,GAAG,SAAc;AAAA,MAAb;AAAEC,IAAAA;AAAF,GAAa;AAC5B,sBACE;AAAA,2BACE;AAAA,6BACE,QAAC,MAAD;AAAQ,QAAA,KAAK,EAAEA,IAAI,CAACC,KAApB;AAA2B,QAAA,IAAI,EAAED,IAAI,CAACE,QAAL,IAAiBF,IAAI,CAACG,EAAvD;AAA2D,QAAA,IAAI,EAAE;AAAjE;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,UADF;AAOF,CARD;;MAAMJ,Q;;AAUN,MAAMK,QAAQ,GAAG,MAAM;AAAA;;AACrB,QAAM;AAACC,IAAAA;AAAD,MAAWV,cAAc,EAA/B;AACA,QAAM,CAACW,KAAD,EAAQC,QAAR,IAAoBd,QAAQ,CAAC,EAAD,CAAlC;AACA,QAAM,CAACe,OAAD,EAAUC,UAAV,IAAwBhB,QAAQ,CAAC,KAAD,CAAtC;AACA,QAAM,CAACiB,SAAD,EAAYC,YAAZ,IAA4BlB,QAAQ,CAAC,KAAD,CAA1C;AAEAD,EAAAA,SAAS,CAAC,MAAM;AACf,UAAMoB,QAAQ,GAAG,YAAY;AAC3B,UAAGJ,OAAH,EAAY;AAEZC,MAAAA,UAAU,CAAC,IAAD,CAAV;;AAEA,UAAI;AACF,cAAMI,QAAQ,GAAG,MAAMR,MAAM,CAACS,UAAP,CACrB;AAAEX,UAAAA,EAAE,EAAE;AAAEY,YAAAA,GAAG,EAAEV,MAAM,CAACW;AAAd;AAAN,SADqB,EAErB;AAAEb,UAAAA,EAAE,EAAE;AAAN,SAFqB,EAGrB;AAAEc,UAAAA,KAAK,EAAE;AAAT,SAHqB,CAAvB;;AAMA,YAAGJ,QAAQ,CAACP,KAAT,CAAeY,MAAlB,EAA0B;AACxBX,UAAAA,QAAQ,CAACM,QAAQ,CAACP,KAAV,CAAR;AACD,SAFD,MAEO;AACLK,UAAAA,YAAY,CAAC,IAAD,CAAZ;AACD;AAEF,OAbD,CAaE,OAAOQ,KAAP,EAAc;AACdC,QAAAA,OAAO,CAACC,GAAR,CAAYF,KAAZ;AACD;;AACDV,MAAAA,UAAU,CAAC,KAAD,CAAV;AACD,KAtBD;;AAwBA,QAAGJ,MAAH,EAAWO,QAAQ;AACnB,GA1BQ,EA0BN,EA1BM,CAAT;AA4BA,sBACE,QAAC,aAAD;AAAA,cACIJ,OAAO,gBAAG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAAH,GACPF,KADO,aACPA,KADO,uBACPA,KAAK,CAAEgB,GAAP,CAAW,CAACtB,IAAD,EAAOuB,CAAP,kBACT,QAAC,QAAD;AAAU,MAAA,KAAK,EAAEA,CAAjB;AAAkC,MAAA,IAAI,EAAEvB;AAAxC,OAAyBA,IAAI,CAACG,EAA9B;AAAA;AAAA;AAAA;AAAA,YADF;AAFJ;AAAA;AAAA;AAAA;AAAA,UADF;AAUD,CA5CD;;GAAMC,Q;UACaT,c;;;MADbS,Q;AA8CN,eAAeA,QAAf","sourcesContent":["import React, {useEffect, useState} from 'react';\r\nimport { Avatar, useChatContext } from 'stream-chat-react';\r\nimport { FcInvite } from 'react-icons/fc';\r\n\r\nconst ListContainer = ({ children }) => {\r\n  return (\r\n    <div>\r\n      <div>\r\n        <p>User</p>\r\n        <p>Invite</p>\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nconst UserItem = ({ user }) => {\r\n   return (\r\n     <div>\r\n       <div>\r\n         <Avatar image={user.image} name={user.fullName || user.id} size={32}/>\r\n       </div>\r\n     </div>\r\n   );\r\n}\r\n\r\nconst UserList = () => {\r\n  const {client} = useChatContext();\r\n  const [users, setUsers] = useState([]);\r\n  const [loading, setLoading] = useState(false);\r\n  const [listEmpty, setListEmpty] = useState(false);\r\n\r\n  useEffect(() => {\r\n   const getUsers = async () => {\r\n     if(loading) return ;\r\n\r\n     setLoading(true);\r\n\r\n     try {\r\n       const response = await client.queryUsers(\r\n         { id: { $ne: client.userID} },\r\n         { id: 1 },\r\n         { limit: 8 }\r\n       );\r\n\r\n       if(response.users.length) {\r\n         setUsers(response.users)\r\n       } else {\r\n         setListEmpty(true);\r\n       }\r\n\r\n     } catch (error) {\r\n       console.log(error);\r\n     }\r\n     setLoading(false)\r\n   }\r\n\r\n   if(client) getUsers()\r\n  }, [])\r\n\r\n  return (\r\n    <ListContainer>\r\n      { loading ? <div>Loading users ...</div> : (\r\n        users?.map((user, i) => (\r\n          <UserItem index={i} key={user.id} user={user} />\r\n        ))\r\n      )\r\n      }\r\n    </ListContainer>\r\n  )\r\n}\r\n\r\nexport default UserList\r\n"]},"metadata":{},"sourceType":"module"}