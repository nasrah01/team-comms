{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\nasra\\\\OneDrive\\\\Desktop\\\\chat-app\\\\client\\\\src\\\\components\\\\UserList.jsx\",\n    _s = $RefreshSig$(),\n    _s2 = $RefreshSig$();\n\nimport React, { useEffect, useState } from 'react';\nimport { Avatar, useChatContext } from 'stream-chat-react';\nimport { TiTick } from \"react-icons/ti\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst ListContainer = _ref => {\n  let {\n    children\n  } = _ref;\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"User\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 9,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"Invite\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 10,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 8,\n      columnNumber: 7\n    }, this), children]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 7,\n    columnNumber: 5\n  }, this);\n};\n\n_c = ListContainer;\n\nconst UserItem = _ref2 => {\n  _s();\n\n  let {\n    user,\n    setSelectedUsers\n  } = _ref2;\n  const [selected, setSelected] = useState(false);\n\n  const handleSelect = () => {\n    if (selected) {\n      setSelectedUsers(prevUsers => prevUsers.filter(prevUser => prevUser !== user.id));\n    } else {\n      setSelectedUsers(prevUsers => [...prevUsers, user.id]);\n    }\n\n    setSelected(prevSelected => !prevSelected);\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    onClick: handleSelect,\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(Avatar, {\n        image: user.image,\n        name: user.fullName || user.id,\n        size: 32\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 35,\n        columnNumber: 10\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: user.email || user.id\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 36,\n        columnNumber: 10\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 8\n    }, this), selected ? /*#__PURE__*/_jsxDEV(TiTick, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 20\n    }, this) : '']\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 33,\n    columnNumber: 6\n  }, this);\n};\n\n_s(UserItem, \"jTu/AeLw5BOy6ZW1dDNXzAJjzwE=\");\n\n_c2 = UserItem;\n\nconst UserList = _ref3 => {\n  _s2();\n\n  let {\n    setSelectedUsers\n  } = _ref3;\n  const {\n    client\n  } = useChatContext();\n  const [users, setUsers] = useState([]);\n  const [loading, setLoading] = useState(false);\n  const [listEmpty, setListEmpty] = useState(false);\n  const [error, setError] = useState(false);\n  useEffect(() => {\n    const getUsers = async () => {\n      if (loading) return;\n      setLoading(true);\n\n      try {\n        const response = await client.queryUsers({\n          id: {\n            $ne: client.userID\n          }\n        }, {\n          id: 1\n        }, {\n          limit: 8\n        });\n\n        if (response.users.length) {\n          setUsers(response.users);\n        } else {\n          setListEmpty(true);\n        }\n      } catch (error) {\n        setError(true);\n      }\n\n      setLoading(false);\n    };\n\n    if (client) getUsers();\n  }, []);\n\n  if (error) {\n    return /*#__PURE__*/_jsxDEV(ListContainer, {\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        children: \"Error loading, please refresh and try again.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 80,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 7\n    }, this);\n  }\n\n  if (listEmpty) {\n    return /*#__PURE__*/_jsxDEV(ListContainer, {\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        children: \"No users found.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 90,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 89,\n      columnNumber: 7\n    }, this);\n  }\n\n  return /*#__PURE__*/_jsxDEV(ListContainer, {\n    children: loading ? /*#__PURE__*/_jsxDEV(\"div\", {\n      children: \"Loading users...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 98,\n      columnNumber: 9\n    }, this) : users === null || users === void 0 ? void 0 : users.map((user, i) => /*#__PURE__*/_jsxDEV(UserItem, {\n      index: i,\n      user: user,\n      setSelectedUsers: setSelectedUsers\n    }, user.id, false, {\n      fileName: _jsxFileName,\n      lineNumber: 101,\n      columnNumber: 11\n    }, this))\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 96,\n    columnNumber: 5\n  }, this);\n};\n\n_s2(UserList, \"12oMBGjHHTXxcU7An+bzo8oyRxc=\", false, function () {\n  return [useChatContext];\n});\n\n_c3 = UserList;\nexport default UserList;\n\nvar _c, _c2, _c3;\n\n$RefreshReg$(_c, \"ListContainer\");\n$RefreshReg$(_c2, \"UserItem\");\n$RefreshReg$(_c3, \"UserList\");","map":{"version":3,"sources":["C:/Users/nasra/OneDrive/Desktop/chat-app/client/src/components/UserList.jsx"],"names":["React","useEffect","useState","Avatar","useChatContext","TiTick","ListContainer","children","UserItem","user","setSelectedUsers","selected","setSelected","handleSelect","prevUsers","filter","prevUser","id","prevSelected","image","fullName","email","UserList","client","users","setUsers","loading","setLoading","listEmpty","setListEmpty","error","setError","getUsers","response","queryUsers","$ne","userID","limit","length","map","i"],"mappings":"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","sourcesContent":["import React, {useEffect, useState} from 'react';\r\nimport { Avatar, useChatContext } from 'stream-chat-react';\r\nimport { TiTick } from \"react-icons/ti\";\r\n\r\nconst ListContainer = ({ children }) => {\r\n  return (\r\n    <div>\r\n      <div>\r\n        <p>User</p>\r\n        <p>Invite</p>\r\n      </div>\r\n      {children}\r\n    </div>\r\n  )\r\n}\r\n\r\nconst UserItem = ({ user, setSelectedUsers }) => {\r\n   const [selected, setSelected] = useState(false);\r\n\r\n   const handleSelect = () => {\r\n     if (selected) {\r\n       setSelectedUsers((prevUsers) =>\r\n         prevUsers.filter((prevUser) => prevUser !== user.id)\r\n       );\r\n     } else {\r\n       setSelectedUsers((prevUsers) => [...prevUsers, user.id]);\r\n     }\r\n\r\n     setSelected((prevSelected) => !prevSelected);\r\n   };\r\n\r\n   return (\r\n     <div onClick={handleSelect}>\r\n       <div>\r\n         <Avatar image={user.image} name={user.fullName || user.id} size={32} />\r\n         <p>{user.email || user.id}</p>\r\n       </div>\r\n       {selected ? <TiTick /> : ''}\r\n     </div>\r\n   );\r\n}\r\n\r\nconst UserList = ({ setSelectedUsers }) => {\r\n  const { client } = useChatContext();\r\n  const [users, setUsers] = useState([]);\r\n  const [loading, setLoading] = useState(false);\r\n  const [listEmpty, setListEmpty] = useState(false);\r\n  const [error, setError] = useState(false);\r\n\r\n  useEffect(() => {\r\n    const getUsers = async () => {\r\n      if (loading) return;\r\n\r\n      setLoading(true);\r\n\r\n      try {\r\n        const response = await client.queryUsers(\r\n          { id: { $ne: client.userID } },\r\n          { id: 1 },\r\n          { limit: 8 }\r\n        );\r\n\r\n        if (response.users.length) {\r\n          setUsers(response.users);\r\n        } else {\r\n          setListEmpty(true);\r\n        }\r\n      } catch (error) {\r\n        setError(true);\r\n      }\r\n      setLoading(false);\r\n    };\r\n\r\n    if (client) getUsers();\r\n  }, []);\r\n\r\n  if (error) {\r\n    return (\r\n      <ListContainer>\r\n        <div>\r\n          Error loading, please refresh and try again.\r\n        </div>\r\n      </ListContainer>\r\n    );\r\n  }\r\n\r\n  if (listEmpty) {\r\n    return (\r\n      <ListContainer>\r\n        <div>No users found.</div>\r\n      </ListContainer>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <ListContainer>\r\n      {loading ? (\r\n        <div>Loading users...</div>\r\n      ) : (\r\n        users?.map((user, i) => (\r\n          <UserItem\r\n            index={i}\r\n            key={user.id}\r\n            user={user}\r\n            setSelectedUsers={setSelectedUsers}\r\n          />\r\n        ))\r\n      )}\r\n    </ListContainer>\r\n  );\r\n}\r\n\r\nexport default UserList\r\n"]},"metadata":{},"sourceType":"module"}