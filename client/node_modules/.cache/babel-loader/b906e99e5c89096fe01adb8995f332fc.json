{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\nasra\\\\OneDrive\\\\Desktop\\\\chat-app\\\\client\\\\src\\\\components\\\\ChannelSearch.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from 'react';\nimport { useChatContext } from 'stream-chat-react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst ChannelSearch = _ref => {\n  _s();\n\n  let {\n    setToggleContainer\n  } = _ref;\n  const {\n    client,\n    setActiveChannel\n  } = useChatContext();\n  const [query, setQuery] = useState('');\n  const [loading, setLoading] = useState(false);\n  const [teamChannels, setteamChannels] = useState([]);\n  const [directChannels, setDirectChannels] = useState([]);\n  useEffect(() => {\n    if (!query) {\n      setteamChannels([]);\n    }\n  }, [query]);\n\n  const getChannels = async text => {\n    try {\n      const channelResponse = client.queryChannels({\n        type: 'team',\n        name: {\n          $autocomplete: text\n        },\n        members: {\n          $in: [client.userID]\n        }\n      });\n      const userResponse = client.queryUsers({\n        id: {\n          $ne: client.userID\n        },\n        name: {\n          $autocomplete: text\n        }\n      });\n      const [channels, {\n        users\n      }] = await Promise.all([channelResponse, userResponse]);\n      if (channels.length) setteamChannels(channels);\n      if (users.length) setDirectChannels(users);\n    } catch (error) {\n      setQuery('');\n    }\n  };\n\n  const onSearch = e => {\n    e.preventDefault();\n    setLoading(true);\n    setQuery(e.target.value);\n    getChannels(e.target.value);\n  };\n\n  const setChannel = channel => {\n    setQuery('');\n    setActiveChannel(channel);\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      children: \"search Icon\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(\"input\", {\n        placeholder: \"\",\n        type: \"text\",\n        value: query,\n        onChange: onSearch\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 57,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 7\n    }, this), query && /*#__PURE__*/_jsxDEV(ResultsDropdown, {\n      teamChannels: teamChannels,\n      directChannels: directChannels,\n      loading: loading,\n      setChannel: setChannel,\n      setQuery: setQuery,\n      setToggleContainer: setToggleContainer\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 54,\n    columnNumber: 5\n  }, this);\n};\n\n_s(ChannelSearch, \"QmVIAuMIJM3iKGz/ZK7P+v2hgHE=\", false, function () {\n  return [useChatContext];\n});\n\n_c = ChannelSearch;\nexport default ChannelSearch;\n\nvar _c;\n\n$RefreshReg$(_c, \"ChannelSearch\");","map":{"version":3,"sources":["C:/Users/nasra/OneDrive/Desktop/chat-app/client/src/components/ChannelSearch.jsx"],"names":["React","useState","useEffect","useChatContext","ChannelSearch","setToggleContainer","client","setActiveChannel","query","setQuery","loading","setLoading","teamChannels","setteamChannels","directChannels","setDirectChannels","getChannels","text","channelResponse","queryChannels","type","name","$autocomplete","members","$in","userID","userResponse","queryUsers","id","$ne","channels","users","Promise","all","length","error","onSearch","e","preventDefault","target","value","setChannel","channel"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport { useChatContext } from 'stream-chat-react';\r\n\r\nconst ChannelSearch = ({ setToggleContainer }) => {\r\n  const {client, setActiveChannel} = useChatContext();\r\n  const [query, setQuery] = useState('');\r\n  const [loading, setLoading] = useState(false);\r\n  const [teamChannels, setteamChannels] = useState([]);\r\n  const [directChannels, setDirectChannels] = useState([]);\r\n\r\n  useEffect(() => {\r\n    if(!query) {\r\n      setteamChannels([])\r\n    }\r\n  }, [query])\r\n\r\n  const getChannels = async (text) => {\r\n    try {\r\n\r\n      const channelResponse = client.queryChannels({\r\n        type: 'team', \r\n        name: { $autocomplete: text }, \r\n        members: { $in: [client.userID] }\r\n      });\r\n\r\n      const userResponse = client.queryUsers({\r\n        id: { $ne: client.userID },\r\n        name: { $autocomplete: text },\r\n      });\r\n      \r\n      const [channels, { users }] = await Promise.all([channelResponse, userResponse]);\r\n\r\n      if(channels.length) setteamChannels(channels);\r\n      if(users.length) setDirectChannels(users);\r\n\r\n    } catch (error) {\r\n      setQuery('')\r\n    }\r\n  }\r\n\r\n  const onSearch = (e) => {\r\n    e.preventDefault();\r\n    setLoading(true);\r\n    setQuery(e.target.value);\r\n    getChannels(e.target.value);\r\n  }\r\n\r\n  const setChannel = (channel) => {\r\n    setQuery('');\r\n    setActiveChannel(channel);\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      <div>search Icon</div>\r\n      <div>\r\n        <input placeholder=\"\" type=\"text\" value={query} onChange={onSearch} />\r\n      </div>\r\n      {query && (\r\n        <ResultsDropdown\r\n          teamChannels={teamChannels}\r\n          directChannels={directChannels}\r\n          loading={loading}\r\n          setChannel={setChannel}\r\n          setQuery={setQuery}\r\n          setToggleContainer={setToggleContainer}\r\n        />\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default ChannelSearch\r\n"]},"metadata":{},"sourceType":"module"}