{"ast":null,"code":"import _regeneratorRuntime from\"C:/Users/nasra/OneDrive/Desktop/chat-app/client/node_modules/@babel/runtime/regenerator\";import _asyncToGenerator from\"C:/Users/nasra/OneDrive/Desktop/chat-app/client/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";import _slicedToArray from\"C:/Users/nasra/OneDrive/Desktop/chat-app/client/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import React,{useState,useEffect}from'react';import{useChatContext}from'stream-chat-react';import{ResultsDropdown}from'./';import{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";var ChannelSearch=function ChannelSearch(_ref){var setToggleContainer=_ref.setToggleContainer;var _useChatContext=useChatContext(),client=_useChatContext.client,setActiveChannel=_useChatContext.setActiveChannel;var _useState=useState(''),_useState2=_slicedToArray(_useState,2),query=_useState2[0],setQuery=_useState2[1];var _useState3=useState(false),_useState4=_slicedToArray(_useState3,2),loading=_useState4[0],setLoading=_useState4[1];var _useState5=useState([]),_useState6=_slicedToArray(_useState5,2),teamChannels=_useState6[0],setTeamChannels=_useState6[1];var _useState7=useState([]),_useState8=_slicedToArray(_useState7,2),directChannels=_useState8[0],setDirectChannels=_useState8[1];useEffect(function(){if(!query){setTeamChannels([]);setDirectChannels([]);}},[query]);var getChannels=/*#__PURE__*/function(){var _ref2=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee(text){var channelResponse,userResponse,_yield$Promise$all,_yield$Promise$all2,channels,users;return _regeneratorRuntime.wrap(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:_context.prev=0;channelResponse=client.queryChannels({type:'team',name:{$autocomplete:text},members:{$in:[client.userID]}});userResponse=client.queryUsers({id:{$ne:client.userID},name:{$autocomplete:text}});_context.next=5;return Promise.all([channelResponse,userResponse]);case 5:_yield$Promise$all=_context.sent;_yield$Promise$all2=_slicedToArray(_yield$Promise$all,2);channels=_yield$Promise$all2[0];users=_yield$Promise$all2[1].users;if(channels.length)setTeamChannels(channels);if(users.length)setDirectChannels(users);_context.next=16;break;case 13:_context.prev=13;_context.t0=_context[\"catch\"](0);setQuery('');case 16:case\"end\":return _context.stop();}}},_callee,null,[[0,13]]);}));return function getChannels(_x){return _ref2.apply(this,arguments);};}();var onSearch=function onSearch(e){e.preventDefault();setLoading(true);setQuery(e.target.value);getChannels(e.target.value);};var setChannel=function setChannel(channel){setQuery('');setActiveChannel(channel);};return/*#__PURE__*/_jsxs(\"div\",{children:[/*#__PURE__*/_jsx(\"div\",{children:\"search Icon\"}),/*#__PURE__*/_jsx(\"div\",{children:/*#__PURE__*/_jsx(\"input\",{placeholder:\"\",type:\"text\",value:query,onChange:onSearch})}),query&&/*#__PURE__*/_jsx(ResultsDropdown,{teamChannels:teamChannels,directChannels:directChannels,loading:loading,setChannel:setChannel,setQuery:setQuery,setToggleContainer:setToggleContainer})]});};export default ChannelSearch;","map":{"version":3,"sources":["C:/Users/nasra/OneDrive/Desktop/chat-app/client/src/components/ChannelSearch.jsx"],"names":["React","useState","useEffect","useChatContext","ResultsDropdown","ChannelSearch","setToggleContainer","client","setActiveChannel","query","setQuery","loading","setLoading","teamChannels","setTeamChannels","directChannels","setDirectChannels","getChannels","text","channelResponse","queryChannels","type","name","$autocomplete","members","$in","userID","userResponse","queryUsers","id","$ne","Promise","all","channels","users","length","onSearch","e","preventDefault","target","value","setChannel","channel"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport { useChatContext } from 'stream-chat-react';\r\nimport { ResultsDropdown } from './';\r\n\r\nconst ChannelSearch = ({ setToggleContainer }) => {\r\n  const {client, setActiveChannel} = useChatContext();\r\n  const [query, setQuery] = useState('');\r\n  const [loading, setLoading] = useState(false);\r\n  const [teamChannels, setTeamChannels] = useState([]);\r\n  const [directChannels, setDirectChannels] = useState([]);\r\n\r\n  useEffect(() => {\r\n    if(!query) {\r\n      setTeamChannels([]);\r\n      setDirectChannels([]);\r\n    }\r\n  }, [query])\r\n\r\n  const getChannels = async (text) => {\r\n    try {\r\n\r\n      const channelResponse = client.queryChannels({\r\n        type: 'team', \r\n        name: { $autocomplete: text }, \r\n        members: { $in: [client.userID] }\r\n      });\r\n\r\n      const userResponse = client.queryUsers({\r\n        id: { $ne: client.userID },\r\n        name: { $autocomplete: text },\r\n      });\r\n      \r\n      const [channels, { users }] = await Promise.all([channelResponse, userResponse]);\r\n\r\n      if(channels.length) setTeamChannels(channels);\r\n      if(users.length) setDirectChannels(users);\r\n\r\n    } catch (error) {\r\n      setQuery('')\r\n    }\r\n  }\r\n\r\n  const onSearch = (e) => {\r\n    e.preventDefault();\r\n    setLoading(true);\r\n    setQuery(e.target.value);\r\n    getChannels(e.target.value);\r\n  }\r\n\r\n  const setChannel = (channel) => {\r\n    setQuery('');\r\n    setActiveChannel(channel);\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      <div>search Icon</div>\r\n      <div>\r\n        <input placeholder=\"\" type=\"text\" value={query} onChange={onSearch} />\r\n      </div>\r\n      {query && (\r\n        <ResultsDropdown\r\n          teamChannels={teamChannels}\r\n          directChannels={directChannels}\r\n          loading={loading}\r\n          setChannel={setChannel}\r\n          setQuery={setQuery}\r\n          setToggleContainer={setToggleContainer}\r\n        />\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default ChannelSearch\r\n"]},"metadata":{},"sourceType":"module"}