{"ast":null,"code":"import _regeneratorRuntime from\"C:/Users/nasra/OneDrive/Desktop/chat-app/client/node_modules/@babel/runtime/regenerator\";import _slicedToArray from\"C:/Users/nasra/OneDrive/Desktop/chat-app/client/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import _asyncToGenerator from\"C:/Users/nasra/OneDrive/Desktop/chat-app/client/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";import React from\"react\";import{Avatar,useChatContext}from\"stream-chat-react\";import{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";var channelByUser=/*#__PURE__*/function(){var _ref2=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee(_ref){var client,setActiveChannel,channel,setChannel,filters,_yield$client$queryCh,_yield$client$queryCh2,existingChannel,newChannel;return _regeneratorRuntime.wrap(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:client=_ref.client,setActiveChannel=_ref.setActiveChannel,channel=_ref.channel,setChannel=_ref.setChannel;filters={type:\"messaging\",member_count:2,members:{$eq:[client.user.id,client.userID]}};_context.next=4;return client.queryChannels(filters);case 4:_yield$client$queryCh=_context.sent;_yield$client$queryCh2=_slicedToArray(_yield$client$queryCh,1);existingChannel=_yield$client$queryCh2[0];if(!existingChannel){_context.next=9;break;}return _context.abrupt(\"return\",setActiveChannel(existingChannel));case 9:newChannel=client.channel(\"messaging\",{members:[channel.id,client.userID]});setChannel(newChannel);return _context.abrupt(\"return\",setActiveChannel(newChannel));case 12:case\"end\":return _context.stop();}}},_callee);}));return function channelByUser(_x){return _ref2.apply(this,arguments);};}();var SearchResult=function SearchResult(_ref3){var channel=_ref3.channel,focusedId=_ref3.focusedId,type=_ref3.type,setChannel=_ref3.setChannel,setToggleContainer=_ref3.setToggleContainer;var _useChatContext=useChatContext(),client=_useChatContext.client,setActiveChannel=_useChatContext.setActiveChannel;if(type===\"channel\"){return/*#__PURE__*/_jsxs(\"div\",{onClick:function onClick(){setChannel(channel);if(setToggleContainer){setToggleContainer(function(prevState){return!prevState;});}},className:focusedId===channel.id?\"channel-search__result-container__focused\":\"channel-search__result-container\",children:[/*#__PURE__*/_jsx(\"div\",{className:\"result-hashtag\",children:\"#\"}),/*#__PURE__*/_jsx(\"p\",{className:\"channel-search__result-text\",children:channel.data.name})]});}return/*#__PURE__*/_jsx(\"div\",{onClick:/*#__PURE__*/_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee2(){return _regeneratorRuntime.wrap(function _callee2$(_context2){while(1){switch(_context2.prev=_context2.next){case 0:channelByUser({client:client,setActiveChannel:setActiveChannel,channel:channel,setChannel:setChannel});if(setToggleContainer){setToggleContainer(function(prevState){return!prevState;});}case 2:case\"end\":return _context2.stop();}}},_callee2);})),className:focusedId===channel.id?\"channel-search__result-container__focused\":\"channel-search__result-container\",children:/*#__PURE__*/_jsxs(\"div\",{className:\"channel-search__result-user\",children:[/*#__PURE__*/_jsx(Avatar,{image:channel.image||undefined,name:channel.name,size:24}),/*#__PURE__*/_jsx(\"p\",{className:\"channel-search__result-text\",children:channel.name})]})});};var ResultsDropdown=function ResultsDropdown(_ref5){var teamChannels=_ref5.teamChannels,directChannels=_ref5.directChannels,focusedId=_ref5.focusedId,loading=_ref5.loading,setChannel=_ref5.setChannel,setToggleContainer=_ref5.setToggleContainer;return/*#__PURE__*/_jsxs(\"div\",{className:\"channel-search__results\",children:[/*#__PURE__*/_jsx(\"p\",{className:\"channel-search__results-header\",children:\"Channels\"}),loading&&!teamChannels.length&&/*#__PURE__*/_jsx(\"p\",{className:\"channel-search__results-header\",children:/*#__PURE__*/_jsx(\"i\",{children:\"Loading...\"})}),!loading&&!teamChannels.length?/*#__PURE__*/_jsx(\"p\",{className:\"channel-search__results-header\",children:/*#__PURE__*/_jsx(\"i\",{children:\"No channels found\"})}):teamChannels===null||teamChannels===void 0?void 0:teamChannels.map(function(channel,i){return/*#__PURE__*/_jsx(SearchResult,{channel:channel,focusedId:focusedId,setChannel:setChannel,type:\"channel\",setToggleContainer:setToggleContainer},i);}),/*#__PURE__*/_jsx(\"p\",{className:\"channel-search__results-header\",children:\"Users\"}),loading&&!directChannels.length&&/*#__PURE__*/_jsx(\"p\",{className:\"channel-search__results-header\",children:/*#__PURE__*/_jsx(\"i\",{children:\"Loading...\"})}),!loading&&!directChannels.length?/*#__PURE__*/_jsx(\"p\",{className:\"channel-search__res ults-header\",children:/*#__PURE__*/_jsx(\"i\",{children:\"No direct messages found\"})}):directChannels===null||directChannels===void 0?void 0:directChannels.map(function(channel,i){return/*#__PURE__*/_jsx(SearchResult,{channel:channel,focusedId:focusedId,setChannel:setChannel,type:\"user\",setToggleContainer:setToggleContainer},i);})]});};export default ResultsDropdown;","map":{"version":3,"sources":["C:/Users/nasra/OneDrive/Desktop/chat-app/client/src/components/ResultsDropdown.jsx"],"names":["React","Avatar","useChatContext","channelByUser","client","setActiveChannel","channel","setChannel","filters","type","member_count","members","$eq","user","id","userID","queryChannels","existingChannel","newChannel","SearchResult","focusedId","setToggleContainer","prevState","data","name","image","undefined","ResultsDropdown","teamChannels","directChannels","loading","length","map","i"],"mappings":"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","sourcesContent":["import React from \"react\";\r\nimport { Avatar, useChatContext } from \"stream-chat-react\";\r\n\r\nconst channelByUser = async ({\r\n  client,\r\n  setActiveChannel,\r\n  channel,\r\n  setChannel,\r\n}) => {\r\n  const filters = {\r\n    type: \"messaging\",\r\n    member_count: 2,\r\n    members: { $eq: [client.user.id, client.userID] },\r\n  };\r\n\r\n  const [existingChannel] = await client.queryChannels(filters);\r\n\r\n  if (existingChannel) return setActiveChannel(existingChannel);\r\n\r\n  const newChannel = client.channel(\"messaging\", {\r\n    members: [channel.id, client.userID],\r\n  });\r\n\r\n  setChannel(newChannel);\r\n\r\n  return setActiveChannel(newChannel);\r\n};\r\n\r\nconst SearchResult = ({\r\n  channel,\r\n  focusedId,\r\n  type,\r\n  setChannel,\r\n  setToggleContainer,\r\n}) => {\r\n  const { client, setActiveChannel } = useChatContext();\r\n\r\n  if (type === \"channel\") {\r\n    return (\r\n      <div\r\n        onClick={() => {\r\n          setChannel(channel);\r\n          if (setToggleContainer) {\r\n            setToggleContainer((prevState) => !prevState);\r\n          }\r\n        }}\r\n        className={\r\n          focusedId === channel.id\r\n            ? \"channel-search__result-container__focused\"\r\n            : \"channel-search__result-container\"\r\n        }\r\n      >\r\n        <div className=\"result-hashtag\">#</div>\r\n        <p className=\"channel-search__result-text\">{channel.data.name}</p>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <div\r\n      onClick={async () => {\r\n        channelByUser({ client, setActiveChannel, channel, setChannel });\r\n        if (setToggleContainer) {\r\n          setToggleContainer((prevState) => !prevState);\r\n        }\r\n      }}\r\n      className={\r\n        focusedId === channel.id\r\n          ? \"channel-search__result-container__focused\"\r\n          : \"channel-search__result-container\"\r\n      }\r\n    >\r\n      <div className=\"channel-search__result-user\">\r\n        <Avatar\r\n          image={channel.image || undefined}\r\n          name={channel.name}\r\n          size={24}\r\n        />\r\n        <p className=\"channel-search__result-text\">{channel.name}</p>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nconst ResultsDropdown = ({\r\n  teamChannels,\r\n  directChannels,\r\n  focusedId,\r\n  loading,\r\n  setChannel,\r\n  setToggleContainer,\r\n}) => {\r\n  return (\r\n    <div className=\"channel-search__results\">\r\n      <p className=\"channel-search__results-header\">Channels</p>\r\n      {loading && !teamChannels.length && (\r\n        <p className=\"channel-search__results-header\">\r\n          <i>Loading...</i>\r\n        </p>\r\n      )}\r\n      {!loading && !teamChannels.length ? (\r\n        <p className=\"channel-search__results-header\">\r\n          <i>No channels found</i>\r\n        </p>\r\n      ) : (\r\n        teamChannels?.map((channel, i) => (\r\n          <SearchResult\r\n            channel={channel}\r\n            focusedId={focusedId}\r\n            key={i}\r\n            setChannel={setChannel}\r\n            type=\"channel\"\r\n            setToggleContainer={setToggleContainer}\r\n          />\r\n        ))\r\n      )}\r\n      <p className=\"channel-search__results-header\">Users</p>\r\n      {loading && !directChannels.length && (\r\n        <p className=\"channel-search__results-header\">\r\n          <i>Loading...</i>\r\n        </p>\r\n      )}\r\n      {!loading && !directChannels.length ? (\r\n        <p className=\"channel-search__res ults-header\">\r\n          <i>No direct messages found</i>\r\n        </p>\r\n      ) : (\r\n        directChannels?.map((channel, i) => (\r\n          <SearchResult\r\n            channel={channel}\r\n            focusedId={focusedId}\r\n            key={i}\r\n            setChannel={setChannel}\r\n            type=\"user\"\r\n            setToggleContainer={setToggleContainer}\r\n          />\r\n        ))\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ResultsDropdown;"]},"metadata":{},"sourceType":"module"}