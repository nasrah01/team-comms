{"ast":null,"code":"import _objectSpread from\"C:/Users/nasra/OneDrive/Desktop/chat-app/client/node_modules/@babel/runtime/helpers/esm/objectSpread2\";import _slicedToArray from\"C:/Users/nasra/OneDrive/Desktop/chat-app/client/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import React,{useState}from\"react\";import{MessageList,MessageInput,Thread,Window,useChannelActionContext,Avatar,useChannelStateContext,useChatContext}from\"stream-chat-react\";import{ChannelInfo}from'../assets/ChannelInfo';import{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";export var GiphyContext=/*#__PURE__*/React.createContext({});var ChannelInner=function ChannelInner(_ref){var setIsEditing=_ref.setIsEditing;var _useState=useState(false),_useState2=_slicedToArray(_useState,2),giphyState=_useState2[0],setGiphyState=_useState2[1];var _useChannelActionCont=useChannelActionContext(),sendMessage=_useChannelActionCont.sendMessage;var overrideSubmitHandler=function overrideSubmitHandler(message){var _message$parent;var updatedMessage={attachments:message.attachments,mentioned_users:message.mentioned_users,parent_id:(_message$parent=message.parent)===null||_message$parent===void 0?void 0:_message$parent.id,parent:message.parent,text:message.text};if(giphyState){updatedMessage=_objectSpread(_objectSpread({},updatedMessage),{},{text:\"/giphy \".concat(message.text)});}if(sendMessage){sendMessage(updatedMessage);setGiphyState(false);}};return/*#__PURE__*/_jsx(GiphyContext.Provider,{value:{giphyState:giphyState,setGiphyState:setGiphyState},children:/*#__PURE__*/_jsxs(\"div\",{style:{display:\"flex\",width:\"100%\"},children:[/*#__PURE__*/_jsxs(Window,{children:[/*#__PURE__*/_jsx(TeamChannelHeader,{setIsEditing:setIsEditing}),/*#__PURE__*/_jsx(MessageList,{}),/*#__PURE__*/_jsx(MessageInput,{overrideSubmitHandler:overrideSubmitHandler})]}),/*#__PURE__*/_jsx(Thread,{})]})});};var TeamChannelHeader=function TeamChannelHeader(_ref2){var setIsEditing=_ref2.setIsEditing;var _useChannelStateConte=useChannelStateContext(),channel=_useChannelStateConte.channel,watcher_count=_useChannelStateConte.watcher_count;var _useChatContext=useChatContext(),client=_useChatContext.client;var MessagingHeader=function MessagingHeader(){var members=Object.values(channel.state.members).filter(function(_ref3){var user=_ref3.user;return user.id!==client.userID;});var additionalMembers=members.length-3;if(channel.type===\"messaging\"){return/*#__PURE__*/_jsxs(\"div\",{children:[members.map(function(_ref4,i){var user=_ref4.user;return/*#__PURE__*/_jsxs(\"div\",{children:[/*#__PURE__*/_jsx(Avatar,{image:user.image,name:user.fullName||user.id,size:32}),/*#__PURE__*/_jsx(\"p\",{children:user.fullName||user.id})]},i);}),additionalMembers>0&&/*#__PURE__*/_jsxs(\"p\",{children:[\"and \",additionalMembers,\" more\"]})]});}return/*#__PURE__*/_jsxs(\"div\",{children:[/*#__PURE__*/_jsxs(\"p\",{children:[\"# \",channel.data.name]}),/*#__PURE__*/_jsx(\"span\",{style:{display:\"flex\"},onClick:function onClick(){return setIsEditing(true);},children:/*#__PURE__*/_jsx(ChannelInfo,{})})]});};var getWatcherText=function getWatcherText(watchers){if(!watchers)return\"No users online\";if(watchers===1)return\"1 user online\";return\"\".concat(watchers,\" users online\");};return/*#__PURE__*/_jsxs(\"div\",{children:[/*#__PURE__*/_jsx(MessagingHeader,{}),/*#__PURE__*/_jsx(\"div\",{children:/*#__PURE__*/_jsx(\"p\",{children:getWatcherText(watcher_count)})})]});};export default ChannelInner;","map":{"version":3,"sources":["C:/Users/nasra/OneDrive/Desktop/chat-app/client/src/components/ChannelInner.jsx"],"names":["React","useState","MessageList","MessageInput","Thread","Window","useChannelActionContext","Avatar","useChannelStateContext","useChatContext","ChannelInfo","GiphyContext","createContext","ChannelInner","setIsEditing","giphyState","setGiphyState","sendMessage","overrideSubmitHandler","message","updatedMessage","attachments","mentioned_users","parent_id","parent","id","text","display","width","TeamChannelHeader","channel","watcher_count","client","MessagingHeader","members","Object","values","state","filter","user","userID","additionalMembers","length","type","map","i","image","fullName","data","name","getWatcherText","watchers"],"mappings":"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","sourcesContent":["import React, { useState } from \"react\";\r\nimport { MessageList, MessageInput, Thread, Window, useChannelActionContext, Avatar, useChannelStateContext, useChatContext } from \"stream-chat-react\";\r\n\r\nimport {ChannelInfo} from '../assets/ChannelInfo'\r\n\r\nexport const GiphyContext = React.createContext({});\r\n\r\nconst ChannelInner = ({ setIsEditing }) => {\r\n  const [giphyState, setGiphyState] = useState(false);\r\n  const { sendMessage } = useChannelActionContext();\r\n\r\n  const overrideSubmitHandler = (message) => {\r\n    let updatedMessage = {\r\n      attachments: message.attachments,\r\n      mentioned_users: message.mentioned_users,\r\n      parent_id: message.parent?.id,\r\n      parent: message.parent,\r\n      text: message.text,\r\n    };\r\n\r\n    if (giphyState) {\r\n      updatedMessage = { ...updatedMessage, text: `/giphy ${message.text}` };\r\n    }\r\n\r\n    if (sendMessage) {\r\n      sendMessage(updatedMessage);\r\n      setGiphyState(false);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <GiphyContext.Provider value={{ giphyState, setGiphyState }}>\r\n      <div style={{ display: \"flex\", width: \"100%\" }}>\r\n        <Window>\r\n          <TeamChannelHeader setIsEditing={setIsEditing} />\r\n          <MessageList />\r\n          <MessageInput overrideSubmitHandler={overrideSubmitHandler} />\r\n        </Window>\r\n        <Thread />\r\n      </div>\r\n    </GiphyContext.Provider>\r\n  );\r\n};\r\n\r\nconst TeamChannelHeader = ({ setIsEditing }) => {\r\n  const { channel, watcher_count } = useChannelStateContext();\r\n  const { client } = useChatContext();\r\n\r\n  const MessagingHeader = () => {\r\n    const members = Object.values(channel.state.members).filter(\r\n      ({ user }) => user.id !== client.userID\r\n    );\r\n    const additionalMembers = members.length - 3;\r\n\r\n    if (channel.type === \"messaging\") {\r\n      return (\r\n        <div>\r\n          {members.map(({ user }, i) => (\r\n            <div key={i}>\r\n              <Avatar\r\n                image={user.image}\r\n                name={user.fullName || user.id}\r\n                size={32}\r\n              />\r\n              <p>\r\n                {user.fullName || user.id}\r\n              </p>\r\n            </div>\r\n          ))}\r\n\r\n          {additionalMembers > 0 && (\r\n            <p>\r\n              and {additionalMembers} more\r\n            </p>\r\n          )}\r\n        </div>\r\n      );\r\n    }\r\n\r\n    return (\r\n      <div>\r\n        <p># {channel.data.name}</p>\r\n        <span style={{ display: \"flex\" }} onClick={() => setIsEditing(true)}>\r\n          <ChannelInfo />\r\n        </span>\r\n      </div>\r\n    );\r\n  };\r\n\r\n  const getWatcherText = (watchers) => {\r\n    if (!watchers) return \"No users online\";\r\n    if (watchers === 1) return \"1 user online\";\r\n    return `${watchers} users online`;\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <MessagingHeader />\r\n      <div>\r\n        <p>\r\n          {getWatcherText(watcher_count)}\r\n        </p>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ChannelInner;\r\n"]},"metadata":{},"sourceType":"module"}