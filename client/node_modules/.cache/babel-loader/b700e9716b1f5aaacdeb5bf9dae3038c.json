{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\nasra\\\\OneDrive\\\\Desktop\\\\chat-app\\\\client\\\\src\\\\components\\\\ChannelSearch.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from 'react';\nimport { useChatContext } from 'stream-chat-react';\nimport { ResultsDropdown } from './';\nimport { AiOutlineSearch } from 'react-icons/ai';\nimport styled from 'styled-components';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst ChannelSearch = _ref => {\n  _s();\n\n  let {\n    setToggleContainer\n  } = _ref;\n  const {\n    client,\n    setActiveChannel\n  } = useChatContext();\n  const [query, setQuery] = useState('');\n  const [loading, setLoading] = useState(false);\n  const [teamChannels, setTeamChannels] = useState([]);\n  const [directChannels, setDirectChannels] = useState([]);\n  useEffect(() => {\n    if (!query) {\n      setTeamChannels([]);\n      setDirectChannels([]);\n    }\n  }, [query]);\n\n  const getChannels = async text => {\n    try {\n      const channelResponse = client.queryChannels({\n        type: 'team',\n        name: {\n          $autocomplete: text\n        },\n        members: {\n          $in: [client.userID]\n        }\n      });\n      const userResponse = client.queryUsers({\n        id: {\n          $ne: client.userID\n        },\n        name: {\n          $autocomplete: text\n        }\n      });\n      const [channels, {\n        users\n      }] = await Promise.all([channelResponse, userResponse]);\n      if (channels.length) setTeamChannels(channels);\n      if (users.length) setDirectChannels(users);\n    } catch (error) {\n      setQuery('');\n    }\n  };\n\n  const onSearch = e => {\n    e.preventDefault();\n    setLoading(true);\n    setQuery(e.target.value);\n    getChannels(e.target.value);\n  };\n\n  const setChannel = channel => {\n    setQuery('');\n    setActiveChannel(channel);\n  };\n\n  return /*#__PURE__*/_jsxDEV(SearchContainer, {\n    children: [/*#__PURE__*/_jsxDEV(SearchWrapper, {\n      children: [/*#__PURE__*/_jsxDEV(SearchIcon, {\n        children: /*#__PURE__*/_jsxDEV(AiOutlineSearch, {\n          size: 16\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 61,\n          columnNumber: 9\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 60,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        placeholder: \"Search\",\n        type: \"text\",\n        value: query,\n        onChange: onSearch\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 63,\n        columnNumber: 7\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 7\n    }, this), query && /*#__PURE__*/_jsxDEV(ResultsDropdown, {\n      teamChannels: teamChannels,\n      directChannels: directChannels,\n      loading: loading,\n      setChannel: setChannel,\n      setQuery: setQuery,\n      setToggleContainer: setToggleContainer\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 58,\n    columnNumber: 5\n  }, this);\n};\n\n_s(ChannelSearch, \"8MS4ffuLD+JTR6AFOgkyxbd2B0w=\", false, function () {\n  return [useChatContext];\n});\n\n_c = ChannelSearch;\nexport default ChannelSearch;\nconst SearchContainer = styled.div`\n  position: relative;\n  display: flex;\n  justify-content: flex-start;\n  align-items: center;\n  padding-top: 16px;\n  border-top: 1px solid #00000033;\n`;\n_c2 = SearchContainer;\nconst SearchWrapper = styled.div`\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  height: 40px;\n  background: rgba(255, 255, 255, 0.2);\n  border-radius: 8px;\n  margin-bottom: 8px;\n  border: 1px solid transparent;\n  color: white;\n\n  input {\n    background: none;\n    border: none;\n    color: #fff;\n    font-family: Helvetica Neue, sans-serif;\n    font-size: 16px;\n    outline: none;\n\n    ::placeholder {\n      color: rgba(255, 255, 255, 0.66);\n    }\n  }\n`;\n_c3 = SearchWrapper;\nconst SearchIcon = styled.div`\n  \n`;\n_c4 = SearchIcon;\n\nvar _c, _c2, _c3, _c4;\n\n$RefreshReg$(_c, \"ChannelSearch\");\n$RefreshReg$(_c2, \"SearchContainer\");\n$RefreshReg$(_c3, \"SearchWrapper\");\n$RefreshReg$(_c4, \"SearchIcon\");","map":{"version":3,"sources":["C:/Users/nasra/OneDrive/Desktop/chat-app/client/src/components/ChannelSearch.jsx"],"names":["React","useState","useEffect","useChatContext","ResultsDropdown","AiOutlineSearch","styled","ChannelSearch","setToggleContainer","client","setActiveChannel","query","setQuery","loading","setLoading","teamChannels","setTeamChannels","directChannels","setDirectChannels","getChannels","text","channelResponse","queryChannels","type","name","$autocomplete","members","$in","userID","userResponse","queryUsers","id","$ne","channels","users","Promise","all","length","error","onSearch","e","preventDefault","target","value","setChannel","channel","SearchContainer","div","SearchWrapper","SearchIcon"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport { useChatContext } from 'stream-chat-react';\r\nimport { ResultsDropdown } from './';\r\nimport { AiOutlineSearch } from 'react-icons/ai';\r\nimport styled from 'styled-components';\r\n\r\nconst ChannelSearch = ({ setToggleContainer }) => {\r\n  const {client, setActiveChannel} = useChatContext();\r\n  const [query, setQuery] = useState('');\r\n  const [loading, setLoading] = useState(false);\r\n  const [teamChannels, setTeamChannels] = useState([]);\r\n  const [directChannels, setDirectChannels] = useState([]);\r\n\r\n  useEffect(() => {\r\n    if(!query) {\r\n      setTeamChannels([]);\r\n      setDirectChannels([]);\r\n    }\r\n  }, [query])\r\n\r\n  const getChannels = async (text) => {\r\n    try {\r\n\r\n      const channelResponse = client.queryChannels({\r\n        type: 'team', \r\n        name: { $autocomplete: text }, \r\n        members: { $in: [client.userID] }\r\n      });\r\n\r\n      const userResponse = client.queryUsers({\r\n        id: { $ne: client.userID },\r\n        name: { $autocomplete: text },\r\n      });\r\n      \r\n      const [channels, { users }] = await Promise.all([channelResponse, userResponse]);\r\n\r\n      if(channels.length) setTeamChannels(channels);\r\n      if(users.length) setDirectChannels(users);\r\n\r\n    } catch (error) {\r\n      setQuery('')\r\n    }\r\n  }\r\n\r\n  const onSearch = (e) => {\r\n    e.preventDefault();\r\n    setLoading(true);\r\n    setQuery(e.target.value);\r\n    getChannels(e.target.value);\r\n  }\r\n\r\n  const setChannel = (channel) => {\r\n    setQuery('');\r\n    setActiveChannel(channel);\r\n  }\r\n\r\n  return (\r\n    <SearchContainer>\r\n      <SearchWrapper>\r\n      <SearchIcon>\r\n        <AiOutlineSearch size={16}/>\r\n      </SearchIcon>\r\n      <input placeholder='Search' type=\"text\" value={query} onChange={onSearch} />\r\n      </SearchWrapper>\r\n      {query && (\r\n        <ResultsDropdown\r\n          teamChannels={teamChannels}\r\n          directChannels={directChannels}\r\n          loading={loading}\r\n          setChannel={setChannel}\r\n          setQuery={setQuery}\r\n          setToggleContainer={setToggleContainer}\r\n        />\r\n      )}\r\n    </SearchContainer>\r\n  );\r\n}\r\n\r\nexport default ChannelSearch\r\n\r\nconst SearchContainer = styled.div`\r\n  position: relative;\r\n  display: flex;\r\n  justify-content: flex-start;\r\n  align-items: center;\r\n  padding-top: 16px;\r\n  border-top: 1px solid #00000033;\r\n`;\r\n\r\nconst SearchWrapper = styled.div`\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n  height: 40px;\r\n  background: rgba(255, 255, 255, 0.2);\r\n  border-radius: 8px;\r\n  margin-bottom: 8px;\r\n  border: 1px solid transparent;\r\n  color: white;\r\n\r\n  input {\r\n    background: none;\r\n    border: none;\r\n    color: #fff;\r\n    font-family: Helvetica Neue, sans-serif;\r\n    font-size: 16px;\r\n    outline: none;\r\n\r\n    ::placeholder {\r\n      color: rgba(255, 255, 255, 0.66);\r\n    }\r\n  }\r\n`\r\nconst SearchIcon = styled.div`\r\n  \r\n`"]},"metadata":{},"sourceType":"module"}